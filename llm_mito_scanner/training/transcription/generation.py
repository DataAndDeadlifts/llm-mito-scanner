# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/03 training.transcription.generation.ipynb.

# %% auto 0
__all__ = ['BOS_TOK', 'EOS_TOK', 'INTRON_TOK', 'NULL_TOK', 'MRNA_BOS_TOK', 'MRNA_EOS_TOK', 'get_gene_from_csv',
           'get_mrna_intron_locations', 'get_mrna_from_gene']

# %% ../../../nbs/03 training.transcription.generation.ipynb 4
from pathlib import Path
import pandas as pd

from ...data.download import load_config, \
    get_latest_assembly_path, get_genomic_genbank_path
from .index import get_intron_locations

BOS_TOK = "<bos>"
EOS_TOK = "<eos>"
INTRON_TOK = "<intron>"
NULL_TOK = "<null>"
MRNA_BOS_TOK = "<mrna-bos>"
MRNA_EOS_TOK = "<mrna-eos>"

# %% ../../../nbs/03 training.transcription.generation.ipynb 13
def get_gene_from_csv(chromosome_genes: Path, geneid: str) -> pd.Series:
    with chromosome_genes.open("r") as f:
        header = next(f).replace("\n", "").split(",")
        for row in f:
            if row.startswith(geneid):
                row_series = pd.Series(row.replace("\n", "").split(","))
                row_series.index = header
                return row_series

# %% ../../../nbs/03 training.transcription.generation.ipynb 16
def get_mrna_intron_locations(
        chromosome: str, gene_id: str, transcript_id: str, 
        intron_locations: pd.DataFrame = None, intron_locations_path: Path = None
        ) -> list[tuple[int, int]]:
    if intron_locations is None:
        intron_locations = get_intron_locations(intron_locations_path)
    mrna_intron_locations = intron_locations[
        (intron_locations.chromosome == chromosome) &
        (intron_locations.geneid == gene_id) &
        (intron_locations.transcriptid == transcript_id)
    ]
    if mrna_intron_locations.shape[0] == 0:
        return []
    mrna_intron_locations_list = list(map(tuple, mrna_intron_locations[['intron_start', 'intron_end']].values.tolist()))
    return mrna_intron_locations_list

# %% ../../../nbs/03 training.transcription.generation.ipynb 18
def get_mrna_from_gene(
        gene_sequence: str, 
        mrna_start: int, mrna_end: int, 
        intron_locations: list[tuple[int, int]],
        bos_token: str = BOS_TOK,
        eos_token: str = EOS_TOK,
        intron_token: str = INTRON_TOK,
        mrna_bos_token: str = MRNA_BOS_TOK,
        mrna_eos_token: str = MRNA_EOS_TOK,
        pad_token: str = NULL_TOK,
        debug: bool = False) -> tuple[str, str]:
    gene_sequence_length = len(gene_sequence)
    start_pad_len = mrna_start - 1
    end_pad_len = gene_sequence_length - mrna_end - 1
    if debug:
        print("MRNA START:\t", mrna_start)
        print("MRNA END:\t", mrna_end)
        print("GENE SEQUENCE LENGTH:\t", gene_sequence_length)
        print("START PAD LENGTH:\t", start_pad_len)
        print("END PAD LENGTH:\t", end_pad_len)
    mrna = [mrna_bos_token] + list(gene_sequence[mrna_start: mrna_end + 1]) + [mrna_eos_token]
    for intron_start, intron_end in intron_locations:
        pre_intron = mrna[:intron_start]
        post_intron = mrna[intron_end:]
        intron_length = intron_end - intron_start
        intron = [intron_token] * intron_length
        mrna = pre_intron + intron + post_intron
    if start_pad_len > 0:
        start_pad = [bos_token] + ([pad_token] * start_pad_len)
        mrna = start_pad + mrna
    if end_pad_len > 0:
        end_pad = ([pad_token] * end_pad_len) + [eos_token]
        mrna = mrna + end_pad
    gene = [bos_token] + list(gene_sequence) + [eos_token]
    mrna = [n if n != "T" else "U" for n in mrna]
    return gene, mrna
