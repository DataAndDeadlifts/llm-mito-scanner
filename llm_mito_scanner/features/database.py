# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_define-sqlite-db.ipynb.

# %% auto 0
__all__ = ['get_or_make_sqlite_connection', 'sqlite_table_exists', 'setup_sqlite', 'format_sequence_for_insert',
           'format_mitochondria_related_sequence_for_insert', 'insert_sequences',
           'insert_mitochondria_related_sequences']

# %% ../../nbs/00_define-sqlite-db.ipynb 3
from pathlib import Path
import sqlite3
from Bio import SeqIO
import requests_cache

# %% ../../nbs/00_define-sqlite-db.ipynb 7
def get_or_make_sqlite_connection(data_path: Path) -> sqlite3.Connection:
    """
    Get or make a sqlite database connection.
    """
    return sqlite3.connect(data_path / "genome.db")

def sqlite_table_exists(table_name: str, connection: sqlite3.Connection) -> bool:
    """
    Return True is table exists in sqlite database, else False.
    """
    cursor = connection.cursor()
    result = cursor.execute(f"SELECT name FROM sqlite_master WHERE name='{table_name}'")
    table_exists = result.fetchone()
    cursor.close()
    return table_exists is not None

def setup_sqlite(connection: sqlite3.Connection, overwrite: bool = False):
    cursor = connection.cursor()
    # Tables
    if not sqlite_table_exists("sequence", connection):
        cursor.execute("CREATE TABLE sequence(id, name, description, sequence)")
    if not sqlite_table_exists("sequence_idx", connection):
        cursor.execute("CREATE UNIQUE INDEX sequence_idx ON sequence(id)")
    if not sqlite_table_exists("mitochondria_related", connection):
        cursor.execute("CREATE TABLE mitochondria_related(id)")
    if not sqlite_table_exists("mitochondria_related_idx", connection):
        cursor.execute("CREATE UNIQUE INDEX mitochondria_related_idx ON mitochondria_related(id)")
    cursor.close()

# %% ../../nbs/00_define-sqlite-db.ipynb 9
def format_sequence_for_insert(sequence_record: SeqIO.SeqRecord) -> str:
    """
    Format a SeqIO.SeqRecord for insertion to the sqlite database.
    """
    return f"('{sequence_record.id}', '{sequence_record.name}', '{sequence_record.description}', '{sequence_record.seq}')"


def format_mitochondria_related_sequence_for_insert(record: SeqIO.SeqRecord):
        return f"('{record.id}')"


def insert_sequences(records: list[SeqIO.SeqRecord], connection: sqlite3.Connection):
    """
    Insert a batch of SeqIO.SeqRecords into the sqlite database.
    """
    values_str = ",".join(map(format_sequence_for_insert, records))
    cursor = connection.cursor()
    try:
        cursor.execute(
            f"""
            INSERT INTO sequence VALUES {values_str} 
            ON CONFLICT(id) DO NOTHING;
            """
        )
    except Exception as e:
        raise e
    finally:
        cursor.close()
    connection.commit()
        
        
def insert_mitochondria_related_sequences(records: list[SeqIO.SeqRecord], connection: sqlite3.Connection):
    """
    Insert a batch of SeqIO.SeqRecords into the sqlite database.
    """
    values_str = ",".join(map(format_mitochondria_related_sequence_for_insert, records))
    cursor = connection.cursor()
    try:
        cursor.execute(
            f"""
            INSERT INTO mitochondria_related VALUES {values_str} 
            ON CONFLICT(id) DO NOTHING;
            """
        )
    except Exception as e:
        raise e
    finally:
        cursor.close()
    connection.commit()
