# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/02_get-mitochondrial-sequences.ipynb.

# %% auto 0
__all__ = ['get_structural_nuclear_genes_for_mitochondrial_diseases', 'get_fasta_from_protein_name',
           'add_mitochondria_sequences_to_database']

# %% ../../nbs/02_get-mitochondrial-sequences.ipynb 3
import pandas as pd
from xml.etree import ElementTree
from Bio import SeqIO, Entrez
from io import StringIO
import sqlite3
from lxml import etree
from tqdm.auto import tqdm
from tqdm import contrib as tqdm_contrib

from . import database

# %% ../../nbs/02_get-mitochondrial-sequences.ipynb 4
Entrez.email = str(input())

# %% ../../nbs/02_get-mitochondrial-sequences.ipynb 5
# Download sequences from MITOMAP
def get_structural_nuclear_genes_for_mitochondrial_diseases() -> pd.DataFrame:
    """
    Get structural nuclear genes for mitochondrial diseases from MITOMAP.
    """
    genes = pd.read_html(
        "https://www.mitomap.org/foswiki/bin/view/MITOMAP/NuclearGenesStructural",
        match="Complex"
    )[0].dropna(how='all')
    genes.loc[:, 'Complex'] = genes.Complex.fillna(method='ffill')
    genes.reset_index(drop=True, inplace=True)
    genes.loc[:, 'OMIM'] = genes.OMIM.astype(int).astype(str)
    return genes

# %% ../../nbs/02_get-mitochondrial-sequences.ipynb 10
# class NCBIHTTPRequester:
#     """
#     Class to simplify querying the NCBI databases I need.
#     """
#     def __init__(self, session: requests_cache.CachedSession):
#         self.session = session
#         self.uri = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/"
    
#     def esearch_get(self, database: str, term: str):
#         "Search for things in a given database."
#         params = {
#             "db": database,
#             "term": term
#         }
#         return self.session.get(self.uri + "esearch.fcgi", params=params)

#     def efetch_get(self, database: str, search_ids: list[str], return_type: str, return_mode: str):
#         "Get records from a database given a list of search ids."
#         # efetch.fcgi?db=<database>&id=<uid_list>&rettype=<retrieval_type>&retmode=<retrieval_mode>
#         params = {
#             "db": database,
#             "id": ",".join(search_ids),
#             "rettype": return_type,
#             "retmode": return_mode
#         }
#         return self.session.get(self.uri + "efetch.fcgi", params=params)
    
    
def get_fasta_from_protein_name(name: str) -> list[SeqIO.SeqRecord]:
    """
    Get fasta sequence records from a protein name.
    1.  Search the NCBI Nucleotide database by protein name.
    2.  Use the records we receive back to get fasta sequences.
    3.  Parse the fasta records from [2], return BioPython a list of 
        SeqIO.SeqRecords.
    """
    nucleotide_search_response = Entrez.esearch(
        "nuccore", 
        f'"homo sapiens"[Organism] AND {name}[Protein Name]'
    )
    nucleotide_search_record = Entrez.read(nucleotide_search_response)
    nucleotide_ids = nucleotide_search_record.get("IdList", [])
    nucleotide_id_fasta_response = Entrez.efetch(
        "nuccore",
        id=",".join(nucleotide_ids),
        rettype="fasta",
        retmode="text"
    )
    nucleotide_id_sequence_records = list(SeqIO.parse(nucleotide_id_fasta_response, "fasta"))
    return nucleotide_id_sequence_records

# %% ../../nbs/02_get-mitochondrial-sequences.ipynb 14
def add_mitochondria_sequences_to_database(
    protein_names: list[str],
    connection: sqlite3.Connection
):
    # Add structural genes
    for name in tqdm(protein_names):
        name_sequence_records = get_fasta_from_protein_name(name)
        database.insert_sequences(name_sequence_records, connection)
        database.insert_mitochondria_related_sequences(name_sequence_records, connection)
    # # Add sequences to sequence table
    # tqdm_contrib.tmap(lambda records: database.insert_sequences(records, connection), protein_name_sequence_records)
    # # Add sequence ids to mitochondria-related table
    # tqdm_contrib.tmap(lambda records: database.insert_mitochondria_related_sequences(records, connection), protein_name_sequence_records)
