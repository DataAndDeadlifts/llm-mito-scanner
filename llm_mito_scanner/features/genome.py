# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_make-genome-training-data.ipynb.

# %% auto 0
__all__ = ['format_sequence_for_insert', 'insert_sequences', 'insert_genome_into_sqlite']

# %% ../../nbs/00_make-genome-training-data.ipynb 3
from pathlib import Path
from Bio import SeqIO
import sqlite3

# %% ../../nbs/00_make-genome-training-data.ipynb 9
def format_sequence_for_insert(sequence_record: SeqIO.SeqRecord) -> str:
    """
    Format a SeqIO.SeqRecord for insertion to the sqlite database.
    """
    return f"('{sequence_record.id}', '{sequence_record.name}', '{sequence_record.description}', '{sequence_record.seq}')"


def insert_sequences(records: list[SeqIO.SeqRecord], connection: sqlite3.Connection):
    """
    Insert a batch of SeqIO.SeqRecords into the sqlite database.
    """
    values_str = ",".join(map(format_sequence_for_insert, records))
    cursor = connection.cursor()
    try:
        cursor.execute(
            f"""
            INSERT INTO sequence VALUES {values_str} 
            ON CONFLICT(id) DO NOTHING;
            """
        )
    except Exception as e:
        raise e
    finally:
        cursor.close()
    

def insert_genome_into_sqlite(
    genome_file_path: Path, 
    sqlite_connection: sqlite3.Connection, 
    insert_batch_size: int = 10
):
    """
    Insert the fasta-annotated sequence records from our reference genome 
    into our sqlite3 database.
    """
    records = []
    for i, seq_record in enumerate(SeqIO.parse(genome_file_path, "fasta")):
        records.append(seq_record)
        if i % insert_batch_size == 0:
            insert_sequences(records, sqlite_connection)
            records = []
    insert_sequences(records, sqlite_connection)
