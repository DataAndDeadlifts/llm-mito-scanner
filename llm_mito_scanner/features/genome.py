# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00 features.genome.ipynb.

# %% auto 0
__all__ = ['get_num_fasta_records', 'break_genome_into_fasta_files', 'validate_written_genome_fasta_files']

# %% ../../nbs/00 features.genome.ipynb 3
from pathlib import Path
from Bio import SeqIO
from tqdm.auto import tqdm
from yaml import safe_load

# %% ../../nbs/00 features.genome.ipynb 8
def get_num_fasta_records(fasta_file: Path):
    num_records = 0
    with fasta_file.open("r") as f:
        for line in f:
            if line.startswith(">"):
                num_records += 1
    return num_records


def break_genome_into_fasta_files(
    genome_file_path: Path, 
    write_path: Path,
):
    """
    Breakdown the reference genome fasta file into individual files.
    """
    num_records = get_num_fasta_records(genome_file_path)
    progress_bar = tqdm(total=num_records)
    for seq_record in SeqIO.parse(genome_file_path, "fasta"):
        seq_record_write_path = write_path / f"{seq_record.id}.fasta"
        if not seq_record_write_path.exists():
            with seq_record_write_path.open("w+") as out:
                SeqIO.write([seq_record], out, "fasta")
        progress_bar.update(1)
    progress_bar.close()

# %% ../../nbs/00 features.genome.ipynb 10
def validate_written_genome_fasta_files(
    write_path: Path
) -> int:
    unlinked_files = 0
    for file in write_path.glob("*.fasta"):
        if file.stat().st_size == 0:
            file.unlink()
            unlinked_files += 1
    return unlinked_files
